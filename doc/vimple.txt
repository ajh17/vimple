*vimple.txt*	Programmatic access to Vim's read-only command output.


			VIM REFERENCE MANUAL	by Barry Arthur


Help on using vimple                                                 *vimple*

1. Introduction				|vimple-intro|
2. View         			|vimple-view-command|
3. Collect				|vimple-collect-command|
4. GCollect				|vimple-gcollect-function|
5. GCCollect				|vimple-gccollect-function|
6. MyMaps         			|vimple-mymaps-command|

==============================================================================
 1. INTRODUCTION                                               *vimple-intro*

Vimple provides VimLOO (Object-oriented VimL) objects for several
built-in commands, such as:

* ls / buffers -> vimple#bl
* scriptnames  -> vimple#sn
* highlight    -> vimple#hl
* version      -> vimple#vn
* marks        -> vimple#ma
* maps         -> vimple#mp
* undolist     -> vimple#ul

These objects all support at least the following three methods:

* update() -> refresh the object's data
* to_s()   -> return a string representation fit for :echo
* to_l()   -> return a list representation

Vimple also provides the following two utility commands to make it
easier to work with Vim's command output:

==============================================================================
 2. VIEW                                     *:View* *vimple-view-command*
>
    :View <command>
<
View will show the output of the given command in a split window.
Having the output in a buffer makes it easily searchable and
modifiable. This command is great if all you want to do is quickly
check for the existance of somthing within the messy formatted output
of a command, or if you need to elaborately massage the output for
some reason. Being in a Vim buffer, you have all of Vim's editing
tools at your disposal.

==============================================================================
 3. COLLECT                            *:Collect* *vimple-collect-command*
>
    :Collect <register-or-variable> <command>
<
Collect is useful for grabbing the command's output into a named
register or variable. This is useful for doing further programmatic
manipulations on the data. If the first argument is a single letter
[a-z] then it is treated as the corresponding register to save the
command output into. If you want to save the command output into a
variable, use a fully scoped variable, like:
>
    :Collect g:regs registers
<
==============================================================================
 4. GCollect()                    *GCollect()*  *vimple-gcollect-function*
>
    GCollect( pattern )
<
Uses "pattern" in a   :global /pattern/   command and returns the results as a
list of lines.
>
    :echo GCollect('^\s*===\s*')
<
==============================================================================
 5. GCCollect()                  *CGCollect()* *vimple-gccollect-function*
>
    GCCollect( pattern )
<
Uses "pattern" in a   :global /pattern/   command and returns the results as a
list of lines with the "pattern" stripped.
>
    :echo GCCollect('^\s*===\s*')

==============================================================================
 6. MYMAPS                               *:MyMaps* *vimple-mymaps-command*
>
  :MyMaps
<
Will show in a new buffer your curently active maps (:map and :map!). The maps
are displayed slightly differently to the builtin commands in that the map
special indicators (*, & and @) are shown immediately after the mode indicator
at the start of the map. <Plug> maps (where <plug> appears in the
lefthand-side) are removed for clarity, and the maps are sorted in an attempt
to group related maps together.

==============================================================================
 7. READINTOBUFFER       *:ReadIntoBuffer* *vimple-readintobuffer-command*
>
  :ReadIntoBuffer
<
For those times when you'd like to read in a subset of lines from a file.
>
  :ReadIntoBuffer foo 5 10
<
Will grab six lines (5 through 10, both inclusive) from file 'foo' into the
current file beneath the current line (as |:read| does).


It defaults to the current line, but you can specify another:
>
  :7 ReadIntoBuffer foo 5 10
<
Will grab six lines (5 through 10, both inclusive) from file 'foo' into the
current file beneath line seven (which means it starts on line 8 - the start
range in this command is exclusive; the end range (shown next) is inclusive.)


And you can limit the insertion range too:
>
  :7,9 ReadIntoBuffer foo 5 10
<
Will grab two lines (5 and 6) from file 'foo' into the current file beneath
line seven (therefore occupying lines 8 and 9 in the current buffer).

The usefulness of being able to limit the range at both ends is debatable, but
if I didn't I'd get requests to do so, surely.

 vim:tw=78:ts=8:ft=help:norl:
